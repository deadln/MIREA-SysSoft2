lang = expr+
expr = declaring_expr | assign_expr | if_expr | while_expr | do_while_expr | print_expr
declaring_expr = var_type var (ASSIGN_OP arithmetic_expr)? ';'
assign_expr = var ASSIGN_OP arithmetic_expr ';'
arithmetic_expr = value | ('(' arithmetic_expr ')') (op arithmetic_expr)*
value = number | var
if_expr = if_head if_body (else_head else_body)?
if_head = 'ако' condition
condition = '(' logical_expression ')'
logical_expression = value (logical_op value)?
if_body = '{' expr+ '}'
else_head = 'инако' (if_head)?
else_body = '{' expr+ '}'
while_expr = while_head while_body
while_head = 'покаместъ' condition
while_body = '{' expr+ '}'
do_while_expr = 'делати' while_body while_head ';'
print_expr = 'изъявити' value ';'
var_type = VAR_TYPE
VAR_TYPE = 'целый' | 'плавающий' | 'суть' | 'испис' | 'замет'
IF_KW = 'ако'
ELSE_KW = 'инако'
WHILE_KW = 'покаместъ'
DO_KW = 'делати'
PRINT_KW = 'изъявити'
number = '0' | NON_ZERO_NUMBER
fragment NON_ZERO_NUMBER = '^0|[1-9&&[^s]][0-9&&[^s]]*$'
L_BR = '('
R_BR = ')'
L_S_BR = '{'
R_S_BR = '}'
SEP = ';'
ASSIGN_OP = '='
logical_op = LOGICAL_OP
fragment LOGICAL_OP = '==' | '>' | '>=' | '<' | '<='
op = OP
fragment OP = '+' | '-' | '*' | '/' | '#'
var = LETTER LETTER_OR_DIGIT*
fragment LETTER = '^[a-zA-Zа-яА-Я_]$'
fragment LETTER_OR_DIGIT = '^[a-zA-Zа-яА-Я_0-9]$'
WS  =  '^[\t\r\n\u000C]+$'